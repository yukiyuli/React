import React, { useContext, useEffect, useState } from 'react'
import classes from './Cart.module.css'
import iconImg from '../../assets/bag.png'
import CartContext from '../../store/cart-context'
import CartDetails from './CartDetails/CartDetails'
import Checkout from '../Cart/Checkout/Checkout'

const Cart = () => {

    const ctx = useContext(CartContext);

    // add a state to show details or not
    const [showDetails, setShowDetails] = useState(false);

    // add a state to show checkout interface or not
    const [showCheckOut, setShowCheckOut] = useState(false);

    // Every time the component is re-rendered, check the total quantity of the product. If the quantity is 0, modify showDetails to false
    // Every time the component is re-rendered, the function body of the component will be executed
    // following code will be error（Too many re-renders. ）
    // if(ctx.totalAmount === 0){
    //     // cart has been empty
    //     setShowDetails(false);
    // }
    // In order to solve above problem. use useEffect hook.
    
    
    /*  
    A second parameter can be passed in useEffect(),
    The second parameter is an array. In the array, you can specify the dependencies of the Effect. After specifying, the Effect will be triggered only when the dependencies change.
    Usually all local variables used in Effect are set as dependencies.
    In this way, it can be ensured that when these values ​​change, the execution of Effect will be triggered
    Like setState() is generated by the hook function useState(),
    useState() will ensure that every render of the component will get the same setState() object,
    So the setState() method can not be set to the dependency.
    If the dependency sets an empty array, it means that the Effect will only be triggered once when the component is initialized.
    */


    useEffect(()=>{
        if(ctx.totalAmount === 0){
            // cart has been empty
            setShowDetails(false);
            setShowCheckOut(false);
        }
    },[ctx, setShowDetails, setShowCheckOut]);

    // show details function
    const toggleDetailsHandler = () => {
        if(ctx.totalAmount === 0) {
            setShowDetails(false);
            return;
        };
        setShowDetails(prevState => !prevState);
    };

    const showCheckoutHandler = () => {
        if(ctx.totalAmount === 0) return;
        setShowCheckOut(true);
    };

    const hideCheckoutHandler = () => {
        setShowCheckOut(false)
    }

    return (
        <div className={classes.Cart} onClick={toggleDetailsHandler}>
            {showCheckOut && <Checkout onHide={hideCheckoutHandler} />}

            {/* import cart detail */}
            {showDetails && <CartDetails />}

            <div className={classes.Icon}>
                <img src={iconImg} />
                {ctx.totalAmount === 0 ? null : <span className={classes.TotalAmount}>{ctx.totalAmount}</span>}

            </div>

            {ctx.totalAmount === 0 ? <p className={classes.NoMeal}>no items</p> : <p className={classes.Price}>{ctx.totalPrice}</p>}
            <button
                onClick={showCheckoutHandler}
                className={`${classes.Button} ${ctx.totalAmount === 0 ? classes.Disabled : ''}`}>Checkout</button>
        </div>
    );
};

export default Cart;